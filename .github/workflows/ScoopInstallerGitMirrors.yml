name: Git-Sync (ScoopInstaller)
on: 
  schedule: 
    - cron: "0 19 * * *"
  watch: 
    types: [started]

jobs:
  sync-repos:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Read config and sync all repos on all platforms
        uses: actions/github-script@v7
        env:
          GITEE_PRIVATE_KEY: ${{ secrets.GITEE_PRIVATE_KEY }}
          CODING_PRIVATE_KEY: ${{ secrets.CODING_PRIVATE_KEY }}
          CNB_PRIVATE_KEY: ${{ secrets.CNB_PRIVATE_KEY }}
        with:
          script: |
            const fs = require('fs');
            const yaml = require('js-yaml');
            const { execSync } = require('child_process');

            // 读取配置文件
            const configContent = fs.readFileSync('.github/sync_config.yml', 'utf8');
            const config = yaml.load(configContent);

            for (const [platKey, plat] of Object.entries(config.platforms)) {
              // 获取私钥
              const secretKey = process.env[plat.secret];
              if (!secretKey) {
                console.log(`No secret for ${platKey}, skipping`);
                continue;
              }
              console.log(`--- 平台: ${platKey} ---`);
              fs.writeFileSync('/tmp/id_rsa', secretKey, {mode: 0o600});
              execSync(`mkdir -p ~/.ssh && cp /tmp/id_rsa ~/.ssh/id_rsa`);
              execSync(`ssh-keyscan -H ${plat.repo_domain} >> ~/.ssh/known_hosts`);

              for (const repo of config.repos) {
                const src = repo.src;
                const repoName = repo.dest ? repo.dest.replace(/\.git$/, '') : src.split('/').pop().replace('.git','');
                const dest = `git@${plat.repo_domain}:${plat.base_url}/${repoName}.git`;
                console.log(`Syncing ${src} -> ${dest}`);
                try {
                  execSync(`rm -rf repo_mirror.git`);
                  execSync(`git clone --mirror "${src}" repo_mirror.git`, {stdio: 'inherit'});
                  execSync(`cd repo_mirror.git && git remote set-url --push origin "${dest}"`, {stdio: 'inherit'});
                  execSync(`cd repo_mirror.git && git push --mirror`, {stdio: 'inherit'});
                  execSync(`rm -rf repo_mirror.git`);
                } catch (e) {
                  console.log(`Failed syncing ${src} -> ${dest}`);
                }
              }
              execSync(`rm -f ~/.ssh/id_rsa`);
            }
