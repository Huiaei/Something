# 工作流名称
name: Git Sync (ScoopInstaller)

# 触发条件
on: 
  watch:
    types: [started]
  schedule:
  - cron: "0 19 * * *"
  workflow_dispatch:

# 作业
jobs:
  # 作业 0: 准备共享的矩阵配置
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.set-matrix.outputs.repos }}
    steps:
      - id: set-matrix
        run: |
          # 将 YAML 格式的列表转换为紧凑的 JSON 字符串，并设置为输出
          echo "repos=$(cat <<'EOF' | jq -c .
          [
            { "name": "Scoop", "org": "ScoopInstaller" },
            { "name": "Main", "org": "ScoopInstaller" },
            { "name": "Extras", "org": "ScoopInstaller" },
            { "name": "Versions", "org": "ScoopInstaller" },
            { "name": "Nirsoft", "org": "ScoopInstaller" },
            { "name": "PHP", "org": "ScoopInstaller" },
            { "name": "Nonportable", "org": "ScoopInstaller" },
            { "name": "Java", "org": "ScoopInstaller" },
            { "name": "Tests", "org": "ScoopInstaller" },
            { "name": "scoop-games", "org": "Calinou", "dest_name": "Games" },
            { "name": "scoop-sysinternals", "org": "niheaven", "dest_name": "Sysinternals" },
            { "name": "scoop-nerd-fonts", "org": "matthewjberger", "dest_name": "Nerd-fonts" }
          ]
          EOF
          )" >> $GITHUB_OUTPUT

  # 作业 1: 处理 SSH 平台
  sync-ssh:
    name: Sync to SSH Platforms (Gitee, Coding)
    runs-on: ubuntu-latest
    needs: prepare-matrix # 依赖于准备作业
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: Gitee
            dest_base: 'git@gitee.com:ScoopInstaller_Mirrors/'
            secret_name: 'GITEE_PRIVATE_KEY'
          - name: Coding
            dest_base: 'git@e.coding.net:huiaei/ScoopInstaller_Mirrors/'
            secret_name: 'CODING_PRIVATE_KEY'
        # 从准备作业的输出中动态加载仓库列表
        repo: ${{ fromJson(needs.prepare-matrix.outputs.repos) }}
    steps:
      - name: Sync ${{ matrix.repo.org }}/${{ matrix.repo.name }} to ${{ matrix.platform.name }}
        uses: wearerequired/git-mirror-action@master
        # ... (和方案1中的步骤相同)

  # 作业 2: 处理 HTTPS 平台
  sync-cnb:
    name: Sync to HTTPS Platform (CNB)
    runs-on: ubuntu-latest
    needs: prepare-matrix # 依赖于准备作业
    strategy:
      fail-fast: false
      matrix:
        # 从准备作业的输出中动态加载仓库列表
        repo: ${{ fromJson(needs.prepare-matrix.outputs.repos) }}
    steps:
      - name: Sync ${{ matrix.repo.org }}/${{ matrix.repo.name }} to CNB
        # ... (和方案1中的步骤相同)
